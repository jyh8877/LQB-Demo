C51 COMPILER V9.59.0.0   MAIN                                                              01/19/2025 20:03:22 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: E:\C51\C51\BIN\C51.EXE User\main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Hardware;.\User) DEBUG O
                    -BJECTEXTEND PRINT(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "main.h"
   2          pdata unsigned char LedBuf[8]={1,1,1,1,0,0,0,0},SegBuf[8] = {0,0,0,0,0,0,0,0};
   3          unsigned char Time[3]={11,22,33},RecTime[3],UartBufIndex;
   4          pdata unsigned char UartBuf[10];
   5          idata unsigned char UlDis,TaskNum,SysTick,DaVal;
   6          idata unsigned int ADValx10;
   7          unsigned long int uwTime;
   8          float Temper;
   9          unsigned int TemperShow,Frep;
  10          unsigned int Time1s;
  11          unsigned char chh = 123;
  12          void Timer0_Init(void)          //100微秒@12.000MHz
  13          {
  14   1              AUXR &= 0x7F;                   //定时器时钟12T模式
  15   1              TMOD &= 0xF0;                   //设置定时器模式
  16   1          TMOD |= 0x05;
  17   1              TL0 = 0x00;                             //设置定时初始值
  18   1              TH0 = 0x00;                             //设置定时初始值
  19   1              TF0 = 0;                                //清除TF0标志
  20   1              TR0 = 1;                                //定时器0开始计时
  21   1      }
  22          void Timer1_Init(void)          //1毫秒@12.000MHz
  23          {
  24   1              AUXR &= 0xBF;                   //定时器时钟12T模式
  25   1              TMOD &= 0x0F;                   //设置定时器模式
  26   1              TL1 = 0x18;                             //设置定时初始值
  27   1              TH1 = 0xFC;                             //设置定时初始值
  28   1              TF1 = 0;                                //清除TF1标志
  29   1              TR1 = 1;                                //定时器1开始计时
  30   1          ET1 = 1;
  31   1          EA = 1;
  32   1      }
  33          void DataProc(void)
  34          {
  35   1          if(Time1s % 150)return;
  36   1          //ReadTime(RecTime);
  37   1          Temper = ReadTemp() ;
  38   1              TemperShow = Temper * 10;
  39   1              
  40   1      }
  41          void KeyProc(void)
  42          {
  43   1      
  44   1          static unsigned int KeyOld,KeyVal,KeyDown,KeyUp;
  45   1          if(Time1s % 20) return;
  46   1          KeyVal = KeyRead();
  47   1          KeyUp = ~KeyVal & (KeyOld ^ KeyVal);
  48   1          KeyDown = KeyVal & (KeyOld ^ KeyVal);
  49   1              KeyOld = KeyVal;
  50   1          if(KeyDownNum(4) && !(KeyDownNum(5)))
  51   1          {
  52   2              SegBuf[0]++;
  53   2          }
  54   1          if(!(KeyDownNum(4)) && (KeyDownNum(5)))
C51 COMPILER V9.59.0.0   MAIN                                                              01/19/2025 20:03:22 PAGE 2   

  55   1          {
  56   2              SegBuf[1]++;
  57   2          }   
  58   1          if((KeyDownNum(4)) && (KeyDownNum(5)))
  59   1          {
  60   2              SegBuf[2]++;
  61   2          }      
  62   1      }
  63          void SegProc(void)
  64          {
  65   1          // SegBuf[7] = UartBuf[0] % 10;
  66   1          // SegBuf[6] = UartBuf[0] / 10;
  67   1      
  68   1          // SegBuf[7] = RecTime[2] % 10;
  69   1          // SegBuf[6] = RecTime[2] / 10;
  70   1          // SegBuf[5] = 17;
  71   1          // SegBuf[4] = RecTime[1] % 10;
  72   1          // SegBuf[3] = RecTime[1] / 10;
  73   1          // SegBuf[2] = 17;
  74   1          // SegBuf[1] = RecTime[0] % 10;
  75   1          // SegBuf[0] = RecTime[0] / 10;
  76   1      
  77   1          // SegBuf[7] = Frep         % 10;
  78   1          // SegBuf[6] = (Frep   / 10 % 10) ;
  79   1          // SegBuf[5] = Frep   / 100 %10;
  80   1          // SegBuf[4] = Frep  / 1000 %10;
  81   1          // SegBuf[3] = Frep / 10000;
  82   1      } 
  83          void ADDA(void)
  84          {
  85   1          ADValx10 = AdRead(0x41) * 10;
  86   1          DaWrite(DaVal*51);
  87   1      }
  88          void GetTime(void)
  89          {
  90   1          ReadTime(RecTime);
  91   1      }
  92          void ReadUlDis(void)
  93          {
  94   1          UlDis = GetUlSound();
  95   1      }
  96          void LedProc(void)
  97          {
  98   1          LedDisp(LedBuf);
  99   1      }
 100          void UartProc(void)
 101          {    
 102   1          if(UartBufIndex == 0)
 103   1              return;
 104   1          if(SysTick >= 10)
 105   1          {
 106   2              SysTick = 0;
 107   2              memset(UartBuf,0,UartBufIndex);
 108   2              UartBufIndex = 0;
 109   2          }
 110   1      }
 111          
 112          typedef struct
 113          {
 114              void (*TaskFunc)(void);
 115              unsigned long int Ratems;
 116              unsigned long int LastRun;
C51 COMPILER V9.59.0.0   MAIN                                                              01/19/2025 20:03:22 PAGE 3   

 117              }TaskType;
 118          TaskType TaskList[] ={
 119              {LedProc,1,0},
 120              {GetTime,300,0},
 121              {KeyProc,10,0},
 122              {ADDA,160,0},
 123              {UartProc,10,0},
 124              {SegProc,200,0}
 125          };
 126          void TaskListInit()
 127          {
 128   1          TaskNum = sizeof(TaskList) / sizeof(TaskType);
 129   1      }
 130          void TaskRun(void)
 131          {
 132   1          unsigned char i;
 133   1          for(i = 0;i < TaskNum;i++)
 134   1          {
 135   2              unsigned long int NowTime = uwTime;
 136   2              if(NowTime > (TaskList[i].LastRun + TaskList[i].Ratems))
 137   2              {
 138   3                  TaskList[i].LastRun = NowTime;
 139   3                  TaskList[i].TaskFunc();
 140   3              }
 141   2          }
 142   1      }
 143          
 144          void main()
 145          {
 146   1          TaskListInit();
 147   1          SetTime(Time);
 148   1              Timer0_Init();
 149   1          Timer1_Init();
 150   1          Uart1_Init();
 151   1          printf("%u",(int)chh);
 152   1          while(1)
 153   1          {
 154   2              TaskRun();
 155   2          }
 156   1      }
 157          
 158          void Routine1(void) interrupt 3 
 159          {
 160   1          static unsigned char SegPos = 0;
 161   1          Time1s++;uwTime++;SysTick++;
 162   1          if(Time1s == 1000)
 163   1          {
 164   2              Frep = ((TH0 << 8) | TL0);
 165   2              TH0 = TL0 = 0;
 166   2              Time1s = 0;
 167   2          }
 168   1          
 169   1          SegPos = (++SegPos) % 8;
 170   1          if(SegBuf[SegPos] > 20)
 171   1              SegDisp(SegPos,SegBuf[SegPos]-'.',1);
 172   1          else
 173   1              SegDisp(SegPos,SegBuf[SegPos],0);
 174   1      }
 175          
 176          void UartRoutine(void) interrupt 4
 177          {
 178   1          if(RI)
C51 COMPILER V9.59.0.0   MAIN                                                              01/19/2025 20:03:22 PAGE 4   

 179   1          {
 180   2              SysTick = 0;
 181   2              UartBuf[UartBufIndex++] = SBUF;
 182   2              RI = 0;
 183   2              if(UartBufIndex > 10)
 184   2                  UartBufIndex = 0;
 185   2          }
 186   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    850    ----
   CONSTANT SIZE    =      3    ----
   XDATA SIZE       =     97       5
   PDATA SIZE       =     26    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =      6    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
