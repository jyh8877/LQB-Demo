C51 COMPILER V9.59.0.0   MAIN                                                              01/19/2025 16:29:42 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: E:\C51\C51\BIN\C51.EXE User\main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Hardware;.\User) DEBUG O
                    -BJECTEXTEND PRINT(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "main.h"
   2          pdata unsigned char LedBuf[8]={1,1,1,1,0,0,0,0},SegBuf[8] = {0,0,0,0,0,0,0,0};
   3          unsigned char Time[3]={11,22,33},RecTime[3],UartBufIndex;
   4          pdata unsigned char UartBuf[10];
   5          idata unsigned char UlDis,TaskNum,SysTick,DaVal;
   6          idata unsigned int ADValx10;
   7          unsigned long int uwTime;
   8          float Temper;
   9          unsigned int TemperShow,Frep;
  10          unsigned int Time1s;
  11          void Timer0_Init(void)          //100微秒@12.000MHz
  12          {
  13   1              AUXR &= 0x7F;                   //定时器时钟12T模式
  14   1              TMOD &= 0xF0;                   //设置定时器模式
  15   1          TMOD |= 0x05;
  16   1              TL0 = 0x00;                             //设置定时初始值
  17   1              TH0 = 0x00;                             //设置定时初始值
  18   1              TF0 = 0;                                //清除TF0标志
  19   1              TR0 = 1;                                //定时器0开始计时
  20   1      }
  21          void Timer1_Init(void)          //1毫秒@12.000MHz
  22          {
  23   1              AUXR &= 0xBF;                   //定时器时钟12T模式
  24   1              TMOD &= 0x0F;                   //设置定时器模式
  25   1              TL1 = 0x18;                             //设置定时初始值
  26   1              TH1 = 0xFC;                             //设置定时初始值
  27   1              TF1 = 0;                                //清除TF1标志
  28   1              TR1 = 1;                                //定时器1开始计时
  29   1          ET1 = 1;
  30   1          EA = 1;
  31   1      }
  32          void DataProc(void)
  33          {
  34   1          if(Time1s % 150)return;
  35   1          //ReadTime(RecTime);
  36   1          Temper = ReadTemp() ;
  37   1              TemperShow = Temper * 10;
  38   1              
  39   1      }
  40          void KeyProc(void)
  41          {
  42   1      
  43   1          static unsigned int KeyOld,KeyVal,KeyDown,KeyUp;
  44   1          if(Time1s % 20) return;
  45   1          KeyVal = KeyRead();
  46   1          KeyUp = ~KeyVal & (KeyOld ^ KeyVal);
  47   1          KeyDown = KeyVal & (KeyOld ^ KeyVal);
  48   1              KeyOld = KeyVal;
  49   1        
  50   1      }
  51          void SegProc(void)
  52          {
  53   1          SegBuf[7] = UartBuf[0] % 10;
  54   1          SegBuf[6] = UartBuf[0] / 10;
C51 COMPILER V9.59.0.0   MAIN                                                              01/19/2025 16:29:42 PAGE 2   

  55   1      
  56   1      
  57   1          // SegBuf[7] = RecTime[2] % 10;
  58   1          // SegBuf[6] = RecTime[2] / 10;
  59   1          // SegBuf[5] = 17;
  60   1          // SegBuf[4] = RecTime[1] % 10;
  61   1          // SegBuf[3] = RecTime[1] / 10;
  62   1          // SegBuf[2] = 17;
  63   1          // SegBuf[1] = RecTime[0] % 10;
  64   1          // SegBuf[0] = RecTime[0] / 10;
  65   1      
  66   1          // SegBuf[7] = Frep         % 10;
  67   1          // SegBuf[6] = (Frep   / 10 % 10) ;
  68   1          // SegBuf[5] = Frep   / 100 %10;
  69   1          // SegBuf[4] = Frep  / 1000 %10;
  70   1          // SegBuf[3] = Frep / 10000;
  71   1      } 
  72          void ADDA(void)
  73          {
  74   1          ADValx10 = AdRead(0x41) * 10;
  75   1          DaWrite(DaVal*51);
  76   1      }
  77          void GetTime(void)
  78          {
  79   1          ReadTime(RecTime);
  80   1      }
  81          void ReadUlDis(void)
  82          {
  83   1          UlDis = GetUlSound();
  84   1      }
  85          void LedProc(void)
  86          {
  87   1          LedDisp(LedBuf);
  88   1      }
  89          void UartProc(void)
  90          {    
  91   1          if(UartBufIndex == 0)
  92   1              return;
  93   1          if(SysTick >= 10)
  94   1          {
  95   2              SysTick = 0;
  96   2              memset(UartBuf,0,UartBufIndex);
  97   2              UartBufIndex = 0;
  98   2          }
  99   1          if(UartBufIndex == 1)
 100   1          {
 101   2              UartBufIndex = 0;
 102   2          }
 103   1      
 104   1      }
 105          
 106          typedef struct
 107          {
 108              void (*TaskFunc)(void);
 109              unsigned long int Ratems;
 110              unsigned long int LastRun;
 111              }TaskType;
 112          TaskType TaskList[] ={
 113              {LedProc,1,0},
 114              {GetTime,300,0},
 115              {ADDA,160,0},
 116              {UartProc,10,0},
C51 COMPILER V9.59.0.0   MAIN                                                              01/19/2025 16:29:42 PAGE 3   

 117              {SegProc,200,0}
 118          };
 119          void TaskListInit()
 120          {
 121   1          TaskNum = sizeof(TaskList) / sizeof(TaskType);
 122   1      }
 123          void TaskRun(void)
 124          {
 125   1          unsigned char i;
 126   1          for(i = 0;i < TaskNum;i++)
 127   1          {
 128   2              unsigned long int NowTime = uwTime;
 129   2              if(NowTime > (TaskList[i].LastRun + TaskList[i].Ratems))
 130   2              {
 131   3                  TaskList[i].LastRun = NowTime;
 132   3                  TaskList[i].TaskFunc();
 133   3              }
 134   2          }
 135   1      }
 136          
 137          void main()
 138          {
 139   1          TaskListInit();
 140   1          SetTime(Time);
 141   1              Timer0_Init();
 142   1          Timer1_Init();
 143   1          Uart1_Init();
 144   1          while(1)
 145   1          {
 146   2              TaskRun();
 147   2          }
 148   1      }
 149          
 150          void Routine1(void) interrupt 3 
 151          {
 152   1          static unsigned char SegPos = 0;
 153   1          Time1s++;uwTime++;SysTick++;
 154   1          if(Time1s == 1000)
 155   1          {
 156   2              Frep = ((TH0 << 8) | TL0);
 157   2              TH0 = TL0 = 0;
 158   2              Time1s = 0;
 159   2          }
 160   1          
 161   1          SegPos = (++SegPos) % 8;
 162   1          if(SegBuf[SegPos] > 20)
 163   1              SegDisp(SegPos,SegBuf[SegPos]-'.',1);
 164   1          else
 165   1              SegDisp(SegPos,SegBuf[SegPos],0);
 166   1      }
 167          
 168          void UartRoutine(void) interrupt 4
 169          {
 170   1          if(RI)
 171   1          {
 172   2              SysTick = 0;
 173   2              UartBuf[UartBufIndex++] = SBUF;
 174   2              RI = 0;
 175   2              if(UartBufIndex > 10)
 176   2                  UartBufIndex = 0;
 177   2          }
 178   1      }
C51 COMPILER V9.59.0.0   MAIN                                                              01/19/2025 16:29:42 PAGE 4   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    799    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     85       5
   PDATA SIZE       =     26    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =      6    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
