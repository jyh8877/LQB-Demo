C51 COMPILER V9.59.0.0   MAIN                                                              01/20/2025 17:03:11 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: E:\C51\C51\BIN\C51.EXE User\main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Hardware;.\User) DEBUG O
                    -BJECTEXTEND PRINT(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "main.h"
   2          pdata unsigned char LedBuf[8]={1,1,1,1,0,0,0,0},SegBuf[8] = {0,0,0,0,0,0,0,0};
   3          unsigned char Time[3]={11,22,33},RecTime[3],UartBufIndex;
   4          pdata unsigned char UartBuf[10];
   5          idata unsigned char UlDis,TaskNum,SysTick,DaVal;
   6          idata unsigned int ADValx10;
   7          unsigned long int uwTime;
   8          float Temper;
   9          unsigned int TemperShow,Frep;
  10          unsigned int Time1s;
  11          unsigned char chh = 123;
  12          void Timer0_Init(void)          //100微秒@12.000MHz
  13          {
  14   1              AUXR &= 0x7F;                   //定时器时钟12T模式
  15   1              TMOD &= 0xF0;                   //设置定时器模式
  16   1          TMOD |= 0x05;
  17   1              TL0 = 0x00;                             //设置定时初始值
  18   1              TH0 = 0x00;                             //设置定时初始值
  19   1              TF0 = 0;                                //清除TF0标志
  20   1              TR0 = 1;                                //定时器0开始计时
  21   1      }
  22          void Timer1_Init(void)          //1毫秒@12.000MHz
  23          {
  24   1              AUXR &= 0xBF;                   //定时器时钟12T模式
  25   1              TMOD &= 0x0F;                   //设置定时器模式
  26   1              TL1 = 0x18;                             //设置定时初始值
  27   1              TH1 = 0xFC;                             //设置定时初始值
  28   1              TF1 = 0;                                //清除TF1标志
  29   1              TR1 = 1;                                //定时器1开始计时
  30   1          ET1 = 1;
  31   1          EA = 1;
  32   1      }
  33          void DataProc(void)
  34          {
  35   1          if(Time1s % 150)return;
  36   1          //ReadTime(RecTime);
  37   1          Temper = ReadTemp() ;
  38   1              TemperShow = Temper * 10;
  39   1              
  40   1      }
  41          void KeyProc(void)
  42          {
  43   1      
  44   1          static unsigned int KeyOld,KeyVal,KeyDown,KeyUp;
  45   1          KeyVal = KeyRead();
  46   1          KeyUp = ~KeyVal & (KeyOld ^ KeyVal);
  47   1          KeyDown = KeyVal & (KeyOld ^ KeyVal);
  48   1              KeyOld = KeyVal;
  49   1          if(KeyDownNum(4))
  50   1          {
  51   2              if(!KeyDownNum(5))
  52   2              {
  53   3                  SegBuf[0]++;
  54   3              }
C51 COMPILER V9.59.0.0   MAIN                                                              01/20/2025 17:03:11 PAGE 2   

  55   2          }
  56   1          if(KeyDownNum(5))
  57   1          {
  58   2              if(!KeyDownNum(4))
  59   2              {
  60   3                  SegBuf[1]++;
  61   3              }
  62   2          }
  63   1          if(KeyDownNum(4) & KeyDownNum(5))
  64   1          {
  65   2              SegBuf[2]++;
  66   2          }
  67   1      }
  68          void SegProc(void)
  69          {
  70   1          // SegBuf[7] = UartBuf[0] % 10;
  71   1          // SegBuf[6] = UartBuf[0] / 10;
  72   1      
  73   1          // SegBuf[7] = RecTime[2] % 10;
  74   1          // SegBuf[6] = RecTime[2] / 10;
  75   1          // SegBuf[5] = 17;
  76   1          // SegBuf[4] = RecTime[1] % 10;
  77   1          // SegBuf[3] = RecTime[1] / 10;
  78   1          // SegBuf[2] = 17;
  79   1          // SegBuf[1] = RecTime[0] % 10;
  80   1          // SegBuf[0] = RecTime[0] / 10;
  81   1      
  82   1          // SegBuf[7] = Frep         % 10;
  83   1          // SegBuf[6] = (Frep   / 10 % 10) ;
  84   1          // SegBuf[5] = Frep   / 100 %10;
  85   1          // SegBuf[4] = Frep  / 1000 %10;
  86   1          // SegBuf[3] = Frep / 10000;
  87   1      } 
  88          void ADDA(void)
  89          {
  90   1          ADValx10 = AdRead(0x41) * 10;
  91   1          DaWrite(DaVal*51);
  92   1      }
  93          void GetTime(void)
  94          {
  95   1          ReadTime(RecTime);
  96   1      }
  97          void ReadUlDis(void)
  98          {
  99   1          UlDis = GetUlSound();
 100   1      }
 101          void LedProc(void)
 102          {
 103   1          LedDisp(LedBuf);
 104   1      }
 105          void UartProc(void)
 106          {    
 107   1          if(UartBufIndex == 0)
 108   1              return;
 109   1          if(SysTick >= 10)
 110   1          {
 111   2              SysTick = 0;
 112   2              memset(UartBuf,0,UartBufIndex);
 113   2              UartBufIndex = 0;
 114   2          }
 115   1      }
 116          
C51 COMPILER V9.59.0.0   MAIN                                                              01/20/2025 17:03:11 PAGE 3   

 117          typedef struct
 118          {
 119              void (*TaskFunc)(void);
 120              unsigned long int Ratems;
 121              unsigned long int LastRun;
 122              }TaskType;
 123          TaskType TaskList[] ={
 124              {LedProc,10,0},
 125              {GetTime,300,0},
 126              {KeyProc,20,0},
 127              {ADDA,160,0},
 128              {UartProc,10,0},
 129              {SegProc,200,0}
 130          };
 131          void TaskListInit()
 132          {
 133   1          TaskNum = sizeof(TaskList) / sizeof(TaskType);
 134   1      }
 135          void TaskRun(void)
 136          {
 137   1          unsigned char i;
 138   1          for(i = 0;i < TaskNum;i++)
 139   1          {
 140   2              unsigned long int NowTime = uwTime;
 141   2              if(NowTime > (TaskList[i].LastRun + TaskList[i].Ratems))
 142   2              {
 143   3                  TaskList[i].LastRun = NowTime;
 144   3                  TaskList[i].TaskFunc();
 145   3              }
 146   2          }
 147   1      }
 148          
 149          void main()
 150          {
 151   1          TaskListInit();
 152   1          SetTime(Time);
 153   1              Timer0_Init();
 154   1          Timer1_Init();
 155   1          Uart1_Init();
 156   1          printf("%u",(int)chh);
 157   1          while(1)
 158   1          {
 159   2              TaskRun();
 160   2          }
 161   1      }
 162          
 163          void Routine1(void) interrupt 3 
 164          {
 165   1          static unsigned char SegPos = 0;
 166   1          Time1s++;uwTime++;SysTick++;
 167   1          if(Time1s == 1000)
 168   1          {
 169   2              Frep = ((TH0 << 8) | TL0);
 170   2              TH0 = TL0 = 0;
 171   2              Time1s = 0;
 172   2          }
 173   1          
 174   1          SegPos = (++SegPos) % 8;
 175   1          if(SegBuf[SegPos] > 20)
 176   1              SegDisp(SegPos,SegBuf[SegPos]-'.',1);
 177   1          else
 178   1              SegDisp(SegPos,SegBuf[SegPos],0);
C51 COMPILER V9.59.0.0   MAIN                                                              01/20/2025 17:03:11 PAGE 4   

 179   1      }
 180          
 181          void UartRoutine(void) interrupt 4
 182          {
 183   1          if(RI)
 184   1          {
 185   2              SysTick = 0;
 186   2              UartBuf[UartBufIndex++] = SBUF;
 187   2              RI = 0;
 188   2              if(UartBufIndex > 10)
 189   2                  UartBufIndex = 0;
 190   2          }
 191   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    847    ----
   CONSTANT SIZE    =      3    ----
   XDATA SIZE       =     97       5
   PDATA SIZE       =     26    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =      6    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
