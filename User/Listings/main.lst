C51 COMPILER V9.59.0.0   MAIN                                                              02/09/2025 10:33:36 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: E:\C51\C51\BIN\C51.EXE main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Hardware;..\User) DEBUG OBJE
                    -CTEXTEND PRINT(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "main.h"
   2          pdata unsigned char LedBuf[8]={1,1,1,1,0,0,0,0},SegBuf[8] = {0,0,0,0,0,0,0,0};
   3          unsigned char Time[3]={11,22,33},RecTime[3],UartBufIndex;
   4          pdata unsigned char UartBuf[10];
   5          idata unsigned char UlDis,TaskNum,SysTick,DaVal,Mode;
   6          idata unsigned int ADValx10;
   7          unsigned long int uwTime;
   8          unsigned int Temperx10;
   9          unsigned int Frep;
  10          unsigned int Time1s;
  11          void ModeInit(void)
  12          {
  13   1          unsigned char i;
  14   1          for(i = 0;i < 8;i++)
  15   1              SegBuf[i] = 16;
  16   1      }
  17          void Timer0_Init(void)          //100微秒@12.000MHz
  18          {
  19   1              AUXR &= 0x7F;                   //定时器时钟12T模式
  20   1              TMOD &= 0xF0;                   //设置定时器模式
  21   1          TMOD |= 0x05;
  22   1              TL0 = 0x00;                             //设置定时初始值
  23   1              TH0 = 0x00;                             //设置定时初始值
  24   1              TF0 = 0;                                //清除TF0标志
  25   1              TR0 = 1;                                //定时器0开始计时
  26   1      }
  27          void Timer1_Init(void)          //1毫秒@12.000MHz
  28          {
  29   1              AUXR &= 0xBF;                   //定时器时钟12T模式
  30   1              TMOD &= 0x0F;                   //设置定时器模式
  31   1              TL1 = 0x18;                             //设置定时初始值
  32   1              TH1 = 0xFC;                             //设置定时初始值
  33   1              TF1 = 0;                                //清除TF1标志
  34   1              TR1 = 1;                                //定时器1开始计时
  35   1          ET1 = 1;
  36   1          EA = 1;
  37   1      }
  38          void KeyProc(void)
  39          {
  40   1      
  41   1          static unsigned int KeyOld,KeyVal,KeyDown,KeyUp;
  42   1          KeyVal = KeyRead();
  43   1          KeyUp = ~KeyVal & (KeyOld ^ KeyVal);
  44   1          KeyDown = KeyVal & (KeyOld ^ KeyVal);
  45   1              KeyOld = KeyVal;
  46   1          if(KeyDownNum(4))
  47   1          {
  48   2                      ModeInit();
  49   2              Mode = (++Mode) % 4;
  50   2          }
  51   1              
  52   1      }
  53          void SegProc(void)
  54          {
C51 COMPILER V9.59.0.0   MAIN                                                              02/09/2025 10:33:36 PAGE 2   

  55   1          // SegBuf[7] = UartBuf[0] % 10;
  56   1          // SegBuf[6] = UartBuf[0] / 10;
  57   1      
  58   1      
  59   1          if(Mode == 0)
  60   1          {
  61   2              SegBuf[7] = Frep         % 10;
  62   2              SegBuf[6] = (Frep   / 10 % 10) ;
  63   2              SegBuf[5] = Frep   / 100 %10;
  64   2              SegBuf[4] = Frep  / 1000 %10;
  65   2              SegBuf[3] = Frep / 10000;
  66   2          }
  67   1          if(Mode == 1)
  68   1          {
  69   2              SegBuf[7] = RecTime[2] % 10;
  70   2              SegBuf[6] = RecTime[2] / 10;
  71   2              SegBuf[5] = 17;
  72   2              SegBuf[4] = RecTime[1] % 10;
  73   2              SegBuf[3] = RecTime[1] / 10;
  74   2              SegBuf[2] = 17;
  75   2              SegBuf[1] = RecTime[0] % 10;
  76   2              SegBuf[0] = RecTime[0] / 10;
  77   2          }
  78   1          if(Mode == 2)
  79   1          {
  80   2              SegBuf[7] = ADValx10 % 10;
  81   2              SegBuf[6] = ADValx10 / 10 + '.';
  82   2          }
  83   1          if(Mode == 3)
  84   1          {
  85   2              SegBuf[7] = Temperx10 % 10;
  86   2              SegBuf[6] = Temperx10 / 10 % 10 + '.';
  87   2              if(Temperx10 /100 % 10)SegBuf[5] = Temperx10 /100 % 10;else{SegBuf[5] = 16;}
  88   2          }
  89   1      } 
  90          void AD(void)
  91          {
  92   1          ADValx10 = ((float)AdRead(0x43) / 255.0) * 50;
  93   1      }
  94          void DA(void)
  95          {
  96   1          DaWrite(DaVal * 51);
  97   1      }
  98          void GetTime(void)
  99          {
 100   1          ReadTime(RecTime);
 101   1      }
 102          void ReadUlDis(void)
 103          {
 104   1          UlDis = GetUlSound();
 105   1      }
 106          void LedProc(void)
 107          {
 108   1          LedDisp(LedBuf);
 109   1      }
 110          void UartProc(void)
 111          {    
 112   1          if(UartBufIndex == 0)
 113   1              return;
 114   1          if(SysTick >= 10)
 115   1          {
 116   2              SysTick = 0;
C51 COMPILER V9.59.0.0   MAIN                                                              02/09/2025 10:33:36 PAGE 3   

 117   2              memset(UartBuf,0,UartBufIndex);
 118   2              UartBufIndex = 0;
 119   2          }
 120   1      }
 121          void Tp(void)
 122          {
 123   1          Temperx10 = ReadTemp() * 10;
 124   1      }
 125          typedef struct
 126          {
 127              void (*TaskFunc)(void);
 128              unsigned long int Ratems;
 129              unsigned long int LastRun;
 130              }TaskType;
 131          TaskType TaskList[] ={
 132              {LedProc,10,0},
 133              {GetTime,300,0},
 134              {KeyProc,20,0},
 135              {AD,160,0},
 136              //{DA,160,0},
 137              {UartProc,10,0},
 138              {Tp,200,0},
 139              {SegProc,200,0}
 140          };
 141          void TaskListInit()
 142          {
 143   1          TaskNum = sizeof(TaskList) / sizeof(TaskType);
 144   1      }
 145          void TaskRun(void)
 146          {
 147   1          unsigned char i;
 148   1          for(i = 0;i < TaskNum;i++)
 149   1          {
 150   2              unsigned long int NowTime = uwTime;
 151   2              if(NowTime > (TaskList[i].LastRun + TaskList[i].Ratems))
 152   2              {
 153   3                  TaskList[i].LastRun = NowTime;
 154   3                  TaskList[i].TaskFunc();
 155   3              }
 156   2          }
 157   1      }
 158          
 159          void main()
 160          {
 161   1          TaskListInit();
 162   1          SetTime(Time);
 163   1              Timer0_Init();
 164   1          Timer1_Init();
 165   1          Uart1_Init();
 166   1          ModeInit();
 167   1          while(1)
 168   1          {
 169   2              TaskRun();
 170   2          }
 171   1      }
 172          
 173          void Routine1(void) interrupt 3 
 174          {
 175   1          static unsigned char SegPos = 0;
 176   1          Time1s++;uwTime++;SysTick++;
 177   1          if(Time1s == 1000)
 178   1          {
C51 COMPILER V9.59.0.0   MAIN                                                              02/09/2025 10:33:36 PAGE 4   

 179   2              Frep = ((TH0 << 8) | TL0);
 180   2              TH0 = TL0 = 0;
 181   2              Time1s = 0;
 182   2          }
 183   1          
 184   1          SegPos = (++SegPos) % 8;
 185   1          if(SegBuf[SegPos] > 20)
 186   1              SegDisp(SegPos,SegBuf[SegPos]-'.',1);
 187   1          else
 188   1              SegDisp(SegPos,SegBuf[SegPos],0);
 189   1      }
 190          
 191          void UartRoutine(void) interrupt 4
 192          {
 193   1          if(RI)
 194   1          {
 195   2              SysTick = 0;
 196   2              UartBuf[UartBufIndex++] = SBUF;
 197   2              RI = 0;
 198   2              if(UartBufIndex > 10)
 199   2                  UartBufIndex = 0;
 200   2          }
 201   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1102    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    103       5
   PDATA SIZE       =     26    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =      7    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
